The purpose of scikit-image is to provide a high-quality library which is free
of charge and restrictions. These inherent principles are also the foundation
for the development practices in the scikit-image community.

The entire library is licensed under the *Modified BSD license*, which allows
unrestricted redistribution for any purpose as long as its copyright notices
and the disclaimers of warranty are maintained [BSD]_. It is compatible with
the popular GPL licenses, so users of scikit-image can choose to make their
code available under the GPL. However, unlike the GPL, it does not require
users to open-source derivative work (BSD is not a so-called copyleft license);
so scikit-image can be readily used in closed-source, commercial environments.

The development team of scikit-image is an open community which collaborates on
the *GitHub* [GitHub]_ platform for issue tracking, code review and release
management. *Google Groups* [GoogleGroups]_ is used as a public discussion
forum for user support, bug reports and announcements. New contributors are
welcome to join the development team, which has seen a steady growth over the
years (numbers to be inserted).

scikit-image complies with the PEP8 coding style standard [PEP8]_ and the NumPy
documentation style [NumpyDoc]_ in order to provide a consistent user
experience across all parts of the library as well as across the scientific
Python toolsets. The majority of the API is intentionally designed as a
functional interface, which allows an intuitive creation of image processing
pipelines by applying different functions in sequence to an input image. In
order to guarantee this universal applicability of image processing routines in
sequence, the library uses n-dimensional NumPy arrays to represent images.

We ensure high code quality by a thorough review process using the pull request
interface on GitHub. scikit-image aims to achieve full unit test coverage,
which is above 80% as of release 0.9. A continuous integration system
([TravisCI]_, [Coveralls]_) checks each commit automatically for unit test
coverage and failures on Python 2 and Python 3. Additionally, the code is
analyzed by several tools to guarantee compliance with coding style standards.
Finally, the properties of each public function must be documented thoroughly
in an API reference, which is embedded as Python docstrings and accessible
through the official project homepage and the command-line interface in
interactive Python consoles. Short usage examples are typically directly
included inside the docstrings, while for every new feature a longer, self-
contained example script is added to the narrative documentation and its
contents are automatically compiled to a gallery on the project website. We use
the Sphinx tool to automatically generate documentation and the website from
the docstrings [Sphinx]_.

At all times, the development version is fully functional and can be obtained
from GitHub. The community releases major updates as stable versions typically
every six months [Versioning]_. Bug fixes contribute to minor updates, which
are released meanwhile.

References
----------
.. [BSD] http://www.gnu.org/licenses/license-list.html#ModifiedBSD
.. [GitHub] https://github.com/scikit-image/scikit-image
.. [GoogleGroups] https://groups.google.com/forum/?&fromgroups#!forum/scikit-image
.. [TravisCI] https://travis-ci.org
.. [Coveralls] https://coveralls.io
.. [PEP8] http://www.python.org/dev/peps/pep-0008/
.. [NumpyDoc] https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
.. [Sphinx] http://sphinx-doc.org/
.. [Versioning] http://en.wikipedia.org/wiki/Software_versioning
